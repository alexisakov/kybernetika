---
title: "Kybernetica.AI"
author: 
    name: "AI"
    affiliation:
        name: "Alex Isakov"
format:
    revealjs:
        incremental: false
        slide-number: true
        background-color: "black"
        theme: 
            - dark
            - custom.scss
---

# Hello world

## Hello world
![this](./img/ico.decisiondraft.png)

## Hello world
![this](./img/ico.decisiondraft.png)

## Hello world
![this](./img/ico.decisiondraft.png)

# Hello world

## Hello world
![this](./img/ico.decisiondraft.png)

## Hello world
![this](./img/ico.decisiondraft.png)

## Hello world

```{ojs}
gods = [
  "Chaos/Gaia/Mountains",
  "Chaos/Gaia/Pontus",
  "Chaos/Gaia/Uranus",
  "Chaos/Eros",
  "Chaos/Erebus",
  "Chaos/Tartarus"
]

Plot.plot({
  axis: null,
  height: 100,
  margin: 10,
  marginLeft: 40,
  marginRight: 120,
  marks: [
    Plot.tree(gods, {textStroke: "black"})
  ]
})

```


# Penguins

```{ojs}
data = FileAttachment("penguins.csv").csv({ typed: true })

viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
viewof islands = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe"], 
    label: "Islands:"
  }
)
filtered = data.filter(function(penguin) {
  return bill_length_min < penguin.bill_length_mm &&
         islands.includes(penguin.island);
})

Plot.rectY(filtered, 
  Plot.binX(
    {y: "count"}, 
    {x: "body_mass_g", fill: "species", thresholds: 20}
  ))
  .plot({
    facet: {
      data: filtered,
      x: "sex",
      y: "species",
      marginRight: 60
    },
    marks: [
      Plot.frame(),
    ]
  }
)

```


## sadfadsf


```{ojs}

d3 = require("d3@7")

Plot.plot((() => {
  const n = 3; // number of facet columns
  const keys = Array.from(d3.union(industries.map((d) => d.industry)));
  const index = new Map(keys.map((key, i) => [key, i]));
  const fx = (key) => index.get(key) % n;
  const fy = (key) => Math.floor(index.get(key) / n);
  return {
    height: 600
    , axis: null
    , color: 'white'
    , y: {insetTop: 10},
    fx: {padding: 0.03},
    marks: [
      Plot.areaY(industries, Plot.normalizeY("extent", {
        x: "date",
        y: "unemployed",
        fx: (d) => fx(d.industry),
        fy: (d) => fy(d.industry)
        , fill: 'white'
      })),
      Plot.text(keys, {fx, fy, frameAnchor: "top-left", dx: 6, dy: 6}),
      Plot.frame()
    ]
  };
})())

```

